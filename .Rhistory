if(resample(c(TRUE,FALSE), 1)){
beta[!ifixb] <-  beta.lower[!ifixb] + (beta.upper[!ifixb] - beta.lower[!ifixb]) * runif(sum(!ifixb), min = parameter.boundary.margin, max = (1-parameter.boundary.margin))
}else{
beta <- best.int.par
}
x.error <- matrix(0, nrow = n.row, ncol = n.col.x)
Objective.Fxn(beta = beta,ifixb = ifixb,ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, Fxn = Fxn, x.error = x.error, tls.env = data.env, x.min = x.min, x.max = x.max  )
x.error <- data.env$x.error
nls.fit <- nls.lm(par = beta[!ifixb],lower = beta.lower[!ifixb] ,upper = beta.upper[!ifixb] ,fn = Objective.Fxn, ifixb = ifixb, ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, beta.lower = beta.lower, beta.upper = beta.upper, return.vector = TRUE, Fxn = Fxn, x.error = x.error, beta2 = beta, tls.env = data.env, x.max = x.max, x.min = x.min )
beta[!ifixb] <- nls.fit$par
#         eta <- (beta.upper - beta.lower)/num.steps
}else{
p.restart <- p.restart * p.restart.grow
}
}
current.val <- Objective.Fxn(beta = beta,ifixb = ifixb,ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, Fxn = Fxn, x.error = x.error, tls.env = data.env, x.min = x.min, x.max = x.max  )
x.error <- data.env$x.error
print(j)
if(current.val < best.val){
nls.fit <- nls.lm(par = beta[!ifixb],lower = beta.lower[!ifixb] ,upper = beta.upper[!ifixb] ,fn = Objective.Fxn, ifixb = ifixb, ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, beta.lower = beta.lower, beta.upper = beta.upper, return.vector = TRUE, Fxn = Fxn, x.error = x.error, beta2 = beta, tls.env = data.env, x.max = x.max, x.min = x.min )
beta[!ifixb] <- nls.fit$par
best.par <- beta
parameter.on.boundary <- any(beta[!ifixb] < beta.lower[!ifixb] + (beta.upper[!ifixb] - beta.lower[!ifixb]) * parameter.boundary.margin) | any(beta[!ifixb] > beta.upper[!ifixb] - (beta.upper[!ifixb] - beta.lower[!ifixb]) * parameter.boundary.margin)
if(!parameter.on.boundary){
best.int.par <- beta
}
best.val <- Objective.Fxn(beta = beta,ifixb = ifixb,ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, Fxn = Fxn, x.error = x.error, tls.env = data.env, x.min = x.min, x.max = x.max  )
x.error <- data.env$x.error
print(best.val)
print(best.par)
parameter.on.boundary <- any(beta[!ifixb] < beta.lower[!ifixb] + (beta.upper[!ifixb] - beta.lower[!ifixb]) * parameter.boundary.margin) | any(beta[!ifixb] > beta.upper[!ifixb] - (beta.upper[!ifixb] - beta.lower[!ifixb]) * parameter.boundary.margin)
if(!parameter.on.boundary){
best.in.par <- beta
}
}
}
delta <- Grad(beta = beta,x = matrix(x[shuffle.seq[reshuffle.counter],] ,ncol = ncol(x)), y = matrix(y[shuffle.seq[reshuffle.counter],], ncol = ncol(y)), x.error = matrix(x.error[shuffle.seq[reshuffle.counter],], ncol = ncol(x)), x.weight = matrix(x.weight[shuffle.seq[reshuffle.counter],], ncol = ncol(x)), y.weight = matrix(y.weight[shuffle.seq[reshuffle.counter],], ncol = ncol(y)), beta.lower = beta.lower, beta.upper = beta.upper, Fxn = Fxn, ifixx = FALSE, ifixb = ifixb,tls.env = new.env(), x.min = x.min, x.max = x.max )
while(any(((beta - eta*delta) < beta.lower) | ((beta - eta*delta) > beta.upper))){
delta <- delta/10
}
beta <- beta - eta * delta
beta[beta < beta.lower] <- beta.lower[beta < beta.lower]
beta[beta > beta.upper] <- beta.upper[beta > beta.upper]
j <- j + 1
while(j <= max.iter){
reshuffle.counter <- reshuffle.counter + 1
eta <- eta * decay.constant
if(runif(1) < p.check.obj){
new.val <- Objective.Fxn(beta = beta,ifixb = ifixb,ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, Fxn = Fxn, x.error = x.error, tls.env = data.env, x.min = x.min, x.max = x.max  )
if(new.val < best.val){
x.error <- data.env$x.error
nls.fit <- nls.lm(par = beta[!ifixb],lower = beta.lower[!ifixb] ,upper = beta.upper[!ifixb] ,fn = Objective.Fxn, ifixb = ifixb, ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, beta.lower = beta.lower, beta.upper = beta.upper, return.vector = TRUE, Fxn = Fxn, x.error = x.error, beta2 = beta, tls.env = data.env, x.max = x.max, x.min = x.min )
beta[!ifixb] <- nls.fit$par
best.par <- beta
parameter.on.boundary <- any(beta[!ifixb] < beta.lower[!ifixb] + (beta.upper[!ifixb] - beta.lower[!ifixb]) * parameter.boundary.margin) | any(beta[!ifixb] > beta.upper[!ifixb] - (beta.upper[!ifixb] - beta.lower[!ifixb]) * parameter.boundary.margin)
if(!parameter.on.boundary){
best.int.par <- beta
}
best.val <- Objective.Fxn(beta = beta,ifixb = ifixb,ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, Fxn = Fxn, x.error = x.error, tls.env = data.env, x.min = x.min, x.max = x.max  )
x.error <- data.env$x.error
print(best.val)
print(beta)
}
}else{
if(runif(1) < p.goto.best.par){
beta <- best.int.par
new.val <- Objective.Fxn(beta = beta,ifixb = ifixb,ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, Fxn = Fxn, x.error = x.error, tls.env = data.env, x.min = x.min, x.max = x.max  )
x.error <- data.env$x.error
}
}
if(reshuffle.counter > nrow(x)-1){
shuffle.seq <- resample(seq(nrow(x)))
reshuffle.counter <- 1
parameter.on.boundary <- any(beta[!ifixb] < beta.lower[!ifixb] + (beta.upper[!ifixb] - beta.lower[!ifixb]) * parameter.boundary.margin) | any(beta[!ifixb] > beta.upper[!ifixb] - (beta.upper[!ifixb] - beta.lower[!ifixb]) * parameter.boundary.margin)
if(parameter.on.boundary){
#if parameters on boundary, then randomly reset parameters or do nothing. The method for resetting parameters is randomly chosen between:
#1: randomly reset parameters
#2: set beta to previous best point on interior of parameter space
if(runif(1) < p.restart){
p.restart <- p.restart * p.restart.decay
if(resample(c(TRUE,FALSE), 1)){
beta[!ifixb] <-  beta.lower[!ifixb] + (beta.upper[!ifixb] - beta.lower[!ifixb]) * runif(sum(!ifixb), min = parameter.boundary.margin, max = (1-parameter.boundary.margin))
}else{
beta <- best.int.par
}
x.error <- matrix(0, nrow = n.row, ncol = n.col.x)
Objective.Fxn(beta = beta,ifixb = ifixb,ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, Fxn = Fxn, x.error = x.error, tls.env = data.env, x.min = x.min, x.max = x.max  )
x.error <- data.env$x.error
nls.fit <- nls.lm(par = beta[!ifixb],lower = beta.lower[!ifixb] ,upper = beta.upper[!ifixb] ,fn = Objective.Fxn, ifixb = ifixb, ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, beta.lower = beta.lower, beta.upper = beta.upper, return.vector = TRUE, Fxn = Fxn, x.error = x.error, beta2 = beta, tls.env = data.env, x.max = x.max, x.min = x.min )
beta[!ifixb] <- nls.fit$par
#         eta <- (beta.upper - beta.lower)/num.steps
}else{
p.restart <- p.restart * p.restart.grow
}
}
current.val <- Objective.Fxn(beta = beta,ifixb = ifixb,ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, Fxn = Fxn, x.error = x.error, tls.env = data.env, x.min = x.min, x.max = x.max  )
x.error <- data.env$x.error
print(j)
if(current.val < best.val){
nls.fit <- nls.lm(par = beta[!ifixb],lower = beta.lower[!ifixb] ,upper = beta.upper[!ifixb] ,fn = Objective.Fxn, ifixb = ifixb, ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, beta.lower = beta.lower, beta.upper = beta.upper, return.vector = TRUE, Fxn = Fxn, x.error = x.error, beta2 = beta, tls.env = data.env, x.max = x.max, x.min = x.min )
beta[!ifixb] <- nls.fit$par
best.par <- beta
parameter.on.boundary <- any(beta[!ifixb] < beta.lower[!ifixb] + (beta.upper[!ifixb] - beta.lower[!ifixb]) * parameter.boundary.margin) | any(beta[!ifixb] > beta.upper[!ifixb] - (beta.upper[!ifixb] - beta.lower[!ifixb]) * parameter.boundary.margin)
if(!parameter.on.boundary){
best.int.par <- beta
}
best.val <- Objective.Fxn(beta = beta,ifixb = ifixb,ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, Fxn = Fxn, x.error = x.error, tls.env = data.env, x.min = x.min, x.max = x.max  )
x.error <- data.env$x.error
print(best.val)
print(best.par)
parameter.on.boundary <- any(beta[!ifixb] < beta.lower[!ifixb] + (beta.upper[!ifixb] - beta.lower[!ifixb]) * parameter.boundary.margin) | any(beta[!ifixb] > beta.upper[!ifixb] - (beta.upper[!ifixb] - beta.lower[!ifixb]) * parameter.boundary.margin)
if(!parameter.on.boundary){
best.in.par <- beta
}
}
}
delta <- Grad(beta = beta,x = matrix(x[shuffle.seq[reshuffle.counter],] ,ncol = ncol(x)), y = matrix(y[shuffle.seq[reshuffle.counter],], ncol = ncol(y)), x.error = matrix(x.error[shuffle.seq[reshuffle.counter],], ncol = ncol(x)), x.weight = matrix(x.weight[shuffle.seq[reshuffle.counter],], ncol = ncol(x)), y.weight = matrix(y.weight[shuffle.seq[reshuffle.counter],], ncol = ncol(y)), beta.lower = beta.lower, beta.upper = beta.upper, Fxn = Fxn, ifixx = FALSE, ifixb = ifixb,tls.env = new.env(), x.min = x.min, x.max = x.max )
while(any(((beta - eta*delta) < beta.lower) | ((beta - eta*delta) > beta.upper))){
delta <- delta/10
}
beta <- beta - eta * delta
beta[beta < beta.lower] <- beta.lower[beta < beta.lower]
beta[beta > beta.upper] <- beta.upper[beta > beta.upper]
#     print(j)
j <- j + 1
}
source('F:/2013/kd estimation/CalciumBufferingTLS/Run.Ca.Buffering.TLS.R')
source('F:/2013/kd estimation/CalciumBufferingTLS/Run.Ca.Buffering.TLS.R')
calcium.data.censored <- read.csv("ls.csv")
calcium.data.censored <- read.csv("ls.csv")
# calcium.data.censored <- calcium.data.censored[calcium.data.censored$Fi < .995 & calcium.data.censored$Ff < .995,]
calcium.data.censored <- calcium.data.censored[calcium.data.censored$Fi < .995 & calcium.data.censored$Ff < .995,]
calcium.data.censored <- calcium.data.censored[(calcium.data.censored$p.saturated > .1),]
# f <- cbind(calcium.data.censored$f.i,calcium.data.censored$f.f)
f <- cbind(calcium.data.censored$Fi,calcium.data.censored$Ff)
write.csv(f, "f.csv", row.names = FALSE)
f.sem <- mean(c(calcium.data.censored$sem_Fi,calcium.data.censored$sem_Ff))
f.sem <- matrix(f.sem,nrow = nrow(f),ncol = ncol(f) )
write.csv(f.sem, "f.sem.csv", row.names = FALSE)
# d.ca <- calcium.data.censored$delta.ca.total
d.ca <- calcium.data.censored$delta_ca_total/1000
d.ca <- matrix(d.ca, nrow = nrow(f))
write.csv(d.ca, "d.ca.csv", row.names=FALSE)
# d.ca.sem <- calcium.data.censored$noise_i_ca
d.ca.sem <- abs((calcium.data.censored$noise_i_ca/calcium.data.censored$sum_i_ca)*calcium.data.censored$delta_ca_total)/1000
d.ca.sem <- mean(d.ca.sem)
d.ca.sem <- matrix(d.ca.sem, nrow = nrow(d.ca), ncol = ncol(d.ca))
write.csv(d.ca.sem, "d.ca.sem.csv", row.names = FALSE)
x <- f
y <- d.ca
y
d.ca.sem
y.weight <- 1/d.ca.sem
y.weight
x.weight <- 1/f.sem
x.weight
x.error <- x * 0
data.env <- new.env()
beta <- c(rf = 50, kd.dye = .380, bt.dye = 100, kd.1 = .8, bt.1 = 125, kd.2 = 0, bt.2 = 0, kappa.nonsaturable = 0, accessible.volume = .5  )
ifixb
ifixx
beta.lower
x.error
data.env
x.max
x.min
asdf <- T.L.S.C(beta = beta, ifixb = ifixb, ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, beta.lower = beta.lower, beta.upper = beta.upper, Fxn = Delta.Ca.Total.Hat.C, x.error = x.error, tls.env = data.env, x.max = x.max, x.min = x.min)
asdf
data.env$x.error
x.error <- data.env$x.error
x + x.error
x <- x + x.error
Delta.Ca.Total.Hat.C(x = x, beta = )
Delta.Ca.Total.Hat.C(x = x, beta = beta)
y <- Delta.Ca.Total.Hat.C(x = x, beta = beta)
y
asdf <- T.L.S.C(beta = beta, ifixb = ifixb, ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, beta.lower = beta.lower, beta.upper = beta.upper, Fxn = Delta.Ca.Total.Hat.C, x.error = x.error, tls.env = data.env, x.max = x.max, x.min = x.min)
asdf
mean(1/x.weight)
mean(1/y.weight)
length(x)
x
rnorm(n = length(x) ,sd = mean(1/x.weight))
matrix(data = rnorm(n = length(x) ,sd = mean(1/x.weight)),nrow = nrow(x), ncol = ncol(x))
y
matrix(data = rnorm(n = length(x) ,sd = mean(1/x.weight)),nrow = nrow(x), ncol = ncol(x))
matrix(data = rnorm(n = length(y) ,sd = mean(1/y.weight)),nrow = nrow(y), ncol = ncol(y))
x <- matrix(data = rnorm(n = length(x) ,sd = mean(1/x.weight)),nrow = nrow(x), ncol = ncol(x))
y <- matrix(data = rnorm(n = length(y) ,sd = mean(1/y.weight)),nrow = nrow(y), ncol = ncol(y))
asdf <- T.L.S.C(beta = beta, ifixb = ifixb, ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, beta.lower = beta.lower, beta.upper = beta.upper, Fxn = Delta.Ca.Total.Hat.C, x.error = x.error, tls.env = data.env, x.max = x.max, x.min = x.min)
asdf
x <- f
y <- d.ca
y.weight <- 1/d.ca.sem
x.weight <- 1/f.sem
x.error <- x * 0
data.env <- new.env()
asdf <- T.L.S.C(beta = beta, ifixb = ifixb, ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, beta.lower = beta.lower, beta.upper = beta.upper, Fxn = Delta.Ca.Total.Hat.C, x.error = x.error, tls.env = data.env, x.max = x.max, x.min = x.min)
x.error <- data.env$x.error
x <- x + x.error
y <- Delta.Ca.Total.Hat.C(x = x, beta = beta)
x <- x + matrix(data = rnorm(n = length(x) ,sd = mean(1/x.weight)),nrow = nrow(x), ncol = ncol(x))
y <- y + matrix(data = rnorm(n = length(y) ,sd = mean(1/y.weight)),nrow = nrow(y), ncol = ncol(y))
asdf <- T.L.S.C(beta = beta, ifixb = ifixb, ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, beta.lower = beta.lower, beta.upper = beta.upper, Fxn = Delta.Ca.Total.Hat.C, x.error = x.error, tls.env = data.env, x.max = x.max, x.min = x.min)
asdf
beta
dbeta <- 1.05
c(1,dbeta,1,dbeta,dbeta,1,1,1,1/dbeta)
beta * c(1,dbeta,1,dbeta,dbeta,1,1,1,1/dbeta)
beta2 <- beta
beta2 * c(1,dbeta,1,dbeta,dbeta,1,1,1,1/dbeta)
dbeta <- 1.05
beta2 <- beta2 * c(1,dbeta,1,dbeta,dbeta,1,1,1,1/dbeta)
asdf <- T.L.S.C(beta = beta, ifixb = ifixb, ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, beta.lower = beta.lower, beta.upper = beta.upper, Fxn = Delta.Ca.Total.Hat.C, x.error = x.error, tls.env = data.env, x.max = x.max, x.min = x.min)
asdf
asdf <- T.L.S.C(beta = beta2, ifixb = ifixb, ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, beta.lower = beta.lower, beta.upper = beta.upper, Fxn = Delta.Ca.Total.Hat.C, x.error = x.error, tls.env = data.env, x.max = x.max, x.min = x.min)
asdf
beta2 <- 0.5 * beta
betas <- seq(1:20)
betas
betas <- seq(1:20)/10
betas
i
i <- 1
c(1,betas[i],1,betas[i],betas[i],1,1,1,1/betas[i])
ifixb
c(1,betas[i],1,betas[i],betas[i],1,1,1,1/betas[i])[ifixb]
c(1,betas[i],1,betas[i],betas[i],1,1,1,1/betas[i])[!ifixb]
beta2 <- beta
beta2[!ifixb]
beta2[!ifixb] * c(1,betas[i],1,betas[i],betas[i],1,1,1,1/betas[i])[!ifixb]
beta2 <- beta
beta2[!ifixb] <- beta2[!ifixb] * c(1,betas[i],1,betas[i],betas[i],1,1,1,1/betas[i])[!ifixb]
beta2
asdf
my.chisq <- NULL
betas <- seq(1:20)/10
i <- 1
seq(betas)
for( i in seq(betas)){
beta2 <- beta
beta2[!ifixb] <- beta2[!ifixb] * c(1,betas[i],1,betas[i],betas[i],1,1,1,1/betas[i])[!ifixb]
my.chisq <- c(my.chisq, T.L.S.C(beta = beta2, ifixb = ifixb, ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, beta.lower = beta.lower, beta.upper = beta.upper, Fxn = Delta.Ca.Total.Hat.C, x.error = x.error, tls.env = data.env, x.max = x.max, x.min = x.min))
print(i)
}
my.chisq
plot(betas,my.chisq)
betas
plot(betas[5:20],my.chisq[5:20])
beta <- c(rf = 50, kd.dye = .380, bt.dye = 100, kd.1 = .8, bt.1 = 500, kd.2 = 0, bt.2 = 0, kappa.nonsaturable = 0, accessible.volume = .5  )
x <- f
y <- d.ca
y.weight <- 1/d.ca.sem
x.weight <- 1/f.sem
x.error <- x * 0
data.env <- new.env()
asdf <- T.L.S.C(beta = beta, ifixb = ifixb, ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, beta.lower = beta.lower, beta.upper = beta.upper, Fxn = Delta.Ca.Total.Hat.C, x.error = x.error, tls.env = data.env, x.max = x.max, x.min = x.min)
x.error <- data.env$x.error
x <- x + x.error
y <- Delta.Ca.Total.Hat.C(x = x, beta = beta)
x <- x + matrix(data = rnorm(n = length(x) ,sd = mean(1/x.weight)),nrow = nrow(x), ncol = ncol(x))
y <- y + matrix(data = rnorm(n = length(y) ,sd = mean(1/y.weight)),nrow = nrow(y), ncol = ncol(y))
my.chisq <- NULL
betas <- seq(5:20)/10
i <- 1
for( i in seq(betas)){
beta2 <- beta
beta2[!ifixb] <- beta2[!ifixb] * c(1,betas[i],1,betas[i],betas[i],1,1,1,1/betas[i])[!ifixb]
my.chisq <- c(my.chisq, T.L.S.C(beta = beta2, ifixb = ifixb, ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, beta.lower = beta.lower, beta.upper = beta.upper, Fxn = Delta.Ca.Total.Hat.C, x.error = x.error, tls.env = data.env, x.max = x.max, x.min = x.min))
print(i)
}
beta2
plot(betas,my.chisq)
plot(betas[3:length(betas)],my.chisq[3:length(betas)])
plot(betas[4:length(betas)],my.chisq[4:length(betas)])
plot(betas[5:length(betas)],my.chisq[5:length(betas)])
plot(betas[7:length(betas)],my.chisq[7:length(betas)])
# this script will read in a csv file with calcium data of the format in fluo-8, process the data to generate a series of experimental fluorescence measurements, and generate a set of total calcium increments corresponding to a specified model beta. chisq from a series multiplier values is calculated and ploted
calcium.data.censored <- read.csv("ls.csv")
calcium.data.censored <- calcium.data.censored[calcium.data.censored$Fi < .995 & calcium.data.censored$Ff < .995,]
calcium.data.censored <- calcium.data.censored[(calcium.data.censored$p.saturated > .1),]
# f <- cbind(calcium.data.censored$f.i,calcium.data.censored$f.f)
f <- cbind(calcium.data.censored$Fi,calcium.data.censored$Ff)
write.csv(f, "f.csv", row.names = FALSE)
f.sem <- mean(c(calcium.data.censored$sem_Fi,calcium.data.censored$sem_Ff))
f.sem <- matrix(f.sem,nrow = nrow(f),ncol = ncol(f) )
write.csv(f.sem, "f.sem.csv", row.names = FALSE)
# d.ca <- calcium.data.censored$delta.ca.total
d.ca <- calcium.data.censored$delta_ca_total/1000
d.ca <- matrix(d.ca, nrow = nrow(f))
write.csv(d.ca, "d.ca.csv", row.names=FALSE)
# d.ca.sem <- calcium.data.censored$noise_i_ca
d.ca.sem <- abs((calcium.data.censored$noise_i_ca/calcium.data.censored$sum_i_ca)*calcium.data.censored$delta_ca_total)/1000
d.ca.sem <- mean(d.ca.sem)
d.ca.sem <- matrix(d.ca.sem, nrow = nrow(d.ca), ncol = ncol(d.ca))
write.csv(d.ca.sem, "d.ca.sem.csv", row.names = FALSE)
beta <- c(rf = 50, kd.dye = .380, bt.dye = 100, kd.1 = .8, bt.1 = 100, kd.2 = 0, bt.2 = 0, kappa.nonsaturable = 0, accessible.volume = .5  )
x <- f
y <- d.ca
y.weight <- 1/d.ca.sem
x.weight <- 1/f.sem
x.error <- x * 0
data.env <- new.env()
asdf <- T.L.S.C(beta = beta, ifixb = ifixb, ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, beta.lower = beta.lower, beta.upper = beta.upper, Fxn = Delta.Ca.Total.Hat.C, x.error = x.error, tls.env = data.env, x.max = x.max, x.min = x.min)
x.error <- data.env$x.error
x <- x + x.error
y <- Delta.Ca.Total.Hat.C(x = x, beta = beta)
x <- x + matrix(data = rnorm(n = length(x) ,sd = mean(1/x.weight)),nrow = nrow(x), ncol = ncol(x))
y <- y + matrix(data = rnorm(n = length(y) ,sd = mean(1/y.weight)),nrow = nrow(y), ncol = ncol(y))
# asdf <- T.L.S.C(beta = beta, ifixb = ifixb, ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, beta.lower = beta.lower, beta.upper = beta.upper, Fxn = Delta.Ca.Total.Hat.C, x.error = x.error, tls.env = data.env, x.max = x.max, x.min = x.min)
# beta2 <- beta
my.chisq <- NULL
betas <- seq(5:20)/10
for( i in seq(betas)){
beta2 <- beta
beta2[!ifixb] <- beta2[!ifixb] * c(1,betas[i],1,betas[i],betas[i],1,1,1,1/betas[i])[!ifixb]
my.chisq <- c(my.chisq, T.L.S.C(beta = beta2, ifixb = ifixb, ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, beta.lower = beta.lower, beta.upper = beta.upper, Fxn = Delta.Ca.Total.Hat.C, x.error = x.error, tls.env = data.env, x.max = x.max, x.min = x.min))
print(i)
}
plot(betas[1:length(betas)],my.chisq[1:length(betas)])
plot(betas[2:length(betas)],my.chisq[2:length(betas)])
plot(betas[3:length(betas)],my.chisq[3:length(betas)])
betas
plot(betas[5:length(betas)],my.chisq[5:length(betas)])
plot(betas[6:length(betas)],my.chisq[6:length(betas)])
my.chisq <- NULL
betas <- seq(5:20)/10
betas
betas <- seq(5:20)/10
betas
seq(5:20)/10
betas <- (5:20)/10
betas
for( i in seq(betas)){
beta2 <- beta
beta2[!ifixb] <- beta2[!ifixb] * c(1,betas[i],1,betas[i],betas[i],1,1,1,1/betas[i])[!ifixb]
my.chisq <- c(my.chisq, T.L.S.C(beta = beta2, ifixb = ifixb, ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, beta.lower = beta.lower, beta.upper = beta.upper, Fxn = Delta.Ca.Total.Hat.C, x.error = x.error, tls.env = data.env, x.max = x.max, x.min = x.min))
print(i)
}
plot(betas,my.chisq)
calcium.data.censored <- read.csv("ls.csv")
calcium.data.censored <- calcium.data.censored[calcium.data.censored$Fi < .99 & calcium.data.censored$Ff < .99,]
calcium.data.censored <- calcium.data.censored[(calcium.data.censored$p.saturated > .1),]
# f <- cbind(calcium.data.censored$f.i,calcium.data.censored$f.f)
f <- cbind(calcium.data.censored$Fi,calcium.data.censored$Ff)
write.csv(f, "f.csv", row.names = FALSE)
f.sem <- mean(c(calcium.data.censored$sem_Fi,calcium.data.censored$sem_Ff))
f.sem <- matrix(f.sem,nrow = nrow(f),ncol = ncol(f) )
write.csv(f.sem, "f.sem.csv", row.names = FALSE)
# d.ca <- calcium.data.censored$delta.ca.total
d.ca <- calcium.data.censored$delta_ca_total/1000
d.ca <- matrix(d.ca, nrow = nrow(f))
write.csv(d.ca, "d.ca.csv", row.names=FALSE)
# d.ca.sem <- calcium.data.censored$noise_i_ca
d.ca.sem <- abs((calcium.data.censored$noise_i_ca/calcium.data.censored$sum_i_ca)*calcium.data.censored$delta_ca_total)/1000
d.ca.sem <- mean(d.ca.sem)
d.ca.sem <- matrix(d.ca.sem, nrow = nrow(d.ca), ncol = ncol(d.ca))
write.csv(d.ca.sem, "d.ca.sem.csv", row.names = FALSE)
beta <- c(rf = 50, kd.dye = .380, bt.dye = 100, kd.1 = .8, bt.1 = 100, kd.2 = 0, bt.2 = 0, kappa.nonsaturable = 0, accessible.volume = .5  )
x <- f
y <- d.ca
y.weight <- 1/d.ca.sem
x.weight <- 1/f.sem
x.error <- x * 0
data.env <- new.env()
asdf <- T.L.S.C(beta = beta, ifixb = ifixb, ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, beta.lower = beta.lower, beta.upper = beta.upper, Fxn = Delta.Ca.Total.Hat.C, x.error = x.error, tls.env = data.env, x.max = x.max, x.min = x.min)
x.error <- data.env$x.error
x <- x + x.error
y <- Delta.Ca.Total.Hat.C(x = x, beta = beta)
x <- x + matrix(data = rnorm(n = length(x) ,sd = mean(1/x.weight)),nrow = nrow(x), ncol = ncol(x))
y <- y + matrix(data = rnorm(n = length(y) ,sd = mean(1/y.weight)),nrow = nrow(y), ncol = ncol(y))
# asdf <- T.L.S.C(beta = beta, ifixb = ifixb, ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, beta.lower = beta.lower, beta.upper = beta.upper, Fxn = Delta.Ca.Total.Hat.C, x.error = x.error, tls.env = data.env, x.max = x.max, x.min = x.min)
# beta2 <- beta
my.chisq <- NULL
betas <- (5:20)/10
for( i in seq(betas)){
beta2 <- beta
beta2[!ifixb] <- beta2[!ifixb] * c(1,betas[i],1,betas[i],betas[i],1,1,1,1/betas[i])[!ifixb]
my.chisq <- c(my.chisq, T.L.S.C(beta = beta2, ifixb = ifixb, ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, beta.lower = beta.lower, beta.upper = beta.upper, Fxn = Delta.Ca.Total.Hat.C, x.error = x.error, tls.env = data.env, x.max = x.max, x.min = x.min))
print(i)
}
plot(betas,my.chisq)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('F:/2013/kd estimation/CalciumBufferingTLS/Run.Ca.Buffering.TLS.R')
betas
beta
sgd.result$par
beta <- sgd.result$par
for( i in seq(betas)){
beta2 <- beta
beta2[!ifixb] <- beta2[!ifixb] * c(1,betas[i],1,betas[i],betas[i],1,1,1,1/betas[i])[!ifixb]
my.chisq <- c(my.chisq, T.L.S.C(beta = beta2, ifixb = ifixb, ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, beta.lower = beta.lower, beta.upper = beta.upper, Fxn = Delta.Ca.Total.Hat.C, x.error = x.error, tls.env = data.env, x.max = x.max, x.min = x.min))
print(i)
}
my.chisq <- NULL
betas <- seq(from = 0.9, to = 1.1, by = .01)
beta
for( i in seq(betas)){
beta2 <- beta
beta2[!ifixb] <- beta2[!ifixb] * c(1,betas[i],1,betas[i],betas[i],1,1,1,1/betas[i])[!ifixb]
my.chisq <- c(my.chisq, T.L.S.C(beta = beta2, ifixb = ifixb, ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, beta.lower = beta.lower, beta.upper = beta.upper, Fxn = Delta.Ca.Total.Hat.C, x.error = x.error, tls.env = data.env, x.max = x.max, x.min = x.min))
print(i)
}
plot(betas,my.chisq)
source('~/.active-rstudio-document')
d.ca
source('F:/2013/kd estimation/CalciumBufferingTLS/Run.Ca.Buffering.TLS.R')
source('F:/2013/kd estimation/playground/20140922.3.R')
sgd.result
sgd.result$par
my.chisq <- NULL
betas <- seq(from = 0.9, to = 1.1, by = .01)
beta <- sgd.result$par
for( i in seq(betas)){
beta2 <- beta
beta2[!ifixb] <- beta2[!ifixb] * c(1,betas[i],1,betas[i],betas[i],1,1,1,1/betas[i])[!ifixb]
my.chisq <- c(my.chisq, T.L.S.C(beta = beta2, ifixb = ifixb, ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, beta.lower = beta.lower, beta.upper = beta.upper, Fxn = Delta.Ca.Total.Hat.C, x.error = x.error, tls.env = data.env, x.max = x.max, x.min = x.min))
print(i)
}
beta2
beta2 <- beta
beta2[!ifixb] <- beta2[!ifixb] * c(1,betas[i],1,betas[i],betas[i],1,1,1,1/betas[i])[!ifixb]
my.chisq <- c(my.chisq, T.L.S.C(beta = beta2, ifixb = ifixb, ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, beta.lower = beta.lower, beta.upper = beta.upper, Fxn = Delta.Ca.Total.Hat.C, x.error = x.error, tls.env = data.env, x.max = x.max, x.min = x.min))
x.error
y
my.chisq <- c(my.chisq, T.L.S.C(beta = beta2, ifixb = ifixb, ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, beta.lower = beta.lower, beta.upper = beta.upper, Fxn = Delta.Ca.Total.Hat.C, x.error = 0*x, tls.env = data.env, x.max = x.max, x.min = x.min))
source('F:/2013/kd estimation/playground/20140922.3.R')
betas
my.chisq
source('F:/2013/kd estimation/playground/20140922.3.R')
my.chisq
min(my.chisq)
my.chisq - min(my.chisq)
my.chisq - min(my.chisq) < 1
betas[my.chisq - min(my.chisq) < 1]
source('F:/2013/kd estimation/CalciumBufferingTLS/Run.Ca.Buffering.TLS.R')
source('F:/2013/kd estimation/CalciumBufferingTLS/Run.Ca.Buffering.TLS.R')
1/.9
beta2
rescale.vector = NULL
is.null(rescale.vector)
source('F:/2013/kd estimation/CalciumBufferingTLS/Run.Ca.Buffering.TLS.R')
source('F:/2013/kd estimation/playground/20140922.4.R')
calcium.data.censored
calcium.data.censored <- read.csv("ls.csv")
calcium.data.censored
calcium.data.censored <- calcium.data.censored[calcium.data.censored$Fi < .99 & calcium.data.censored$Ff < .99,]
calcium.data.censored
calcium.data.censored <- calcium.data.censored[(calcium.data.censored$p.saturated > .1),]
calcium.data.censored
calcium.data.censored$p.saturated
calcium.data.censored$p.saturated
calcium.data.censored <- read.csv("ls.csv")
calcium.data.censored <- calcium.data.censored[calcium.data.censored$Fi < .99 & calcium.data.censored$Ff < .99,]
calcium.data.censored
calcium.data.censored$p.saturated
print(dim(x))
print(dim(f))
source('F:/2013/kd estimation/playground/20140922.4.R')
source('~/.active-rstudio-document')
source('F:/2013/kd estimation/CalciumBufferingTLS/Run.Ca.Buffering.TLS.R')
source('F:/2013/kd estimation/CalciumBufferingTLS/Run.Ca.Buffering.TLS.R')
source('F:/2013/kd estimation/playground/20140922.3.R')
source('~/.active-rstudio-document')
my.chisq
beta2
source('F:/2013/kd estimation/playground/20140922.3.R')
plot(betas,my.chisq, xlab = "alpha", ylab = "TSE")
1/.8
my.chisq <- NULL
betas <- seq(from = 0.8, to = 1.4, by = .02)
beta <- sgd.result$par
for( i in seq(betas)){
beta2 <- beta
beta2[!ifixb] <- beta2[!ifixb] * c(1,betas[i],1,betas[i],betas[i],betas[i],betas[i],1,1/betas[i])[!ifixb]
my.chisq <- c(my.chisq, T.L.S.C(beta = beta2, ifixb = ifixb, ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, beta.lower = beta.lower, beta.upper = beta.upper, Fxn = Delta.Ca.Total.Hat.C, x.error = 0*x, tls.env = data.env, x.max = x.max, x.min = x.min))
print(i)
}
plot(betas,my.chisq, xlab = "alpha", ylab = "TSE")
betas[my.chisq - min(my.chisq) < 1]
betas[my.chisq - min(my.chisq) < 3]
betas[my.chisq - min(my.chisq) < 10]
my.chisq <- NULL
beta <- sgd.result$par
betas <- seq(from = 0.8, to = 1.2, by = .02)
for( i in seq(betas)){
beta2 <- beta
beta2[!ifixb] <- beta2[!ifixb] * c(1,betas[i],1,betas[i],betas[i],betas[i],betas[i],1,1/betas[i])[!ifixb]
my.chisq <- c(my.chisq, T.L.S.C(beta = beta2, ifixb = ifixb, ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, beta.lower = beta.lower, beta.upper = beta.upper, Fxn = Delta.Ca.Total.Hat.C, x.error = 0*x, tls.env = data.env, x.max = x.max, x.min = x.min))
print(i)
}
plot(betas,my.chisq, xlab = "alpha", ylab = "TSE")
betas[my.chisq - min(my.chisq) < 10]
source('F:/2013/kd estimation/playground/20140922.4.R')
source('F:/2013/kd estimation/playground/20140922.4.R')
source('F:/2013/kd estimation/CalciumBufferingTLS/Run.Ca.Buffering.TLS.R')
source('F:/2013/kd estimation/playground/20140922.3.R')
source('F:/2013/kd estimation/playground/20140922.4.R')
source('F:/2013/kd estimation/playground/20140922.4.R')
source('F:/2013/kd estimation/playground/20140922.4.R')
source('F:/2013/kd estimation/CalciumBufferingTLS/Run.Ca.Buffering.TLS.R')
source('F:/2013/kd estimation/playground/20140922.4.R')
source('F:/2013/kd estimation/CalciumBufferingTLS/Run.Ca.Buffering.TLS.R')
source('F:/2013/kd estimation/playground/20140922.3.R')
source('F:/2013/kd estimation/playground/20140922.4.R')
source('F:/2013/kd estimation/CalciumBufferingTLS/Run.Ca.Buffering.TLS.R')
source('F:/2013/kd estimation/playground/20140922.3.R')
source('F:/2013/kd estimation/playground/20140922.3.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
