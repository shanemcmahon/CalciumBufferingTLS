{
    "contents" : "\nif(interactive.file.chooser){\n  print(\"All data files are assumed to be in comma seperated value (csv) format. The first row is assumed contain column names. For details regarding the format see the documentation.\")\n  \n  print(\"Select the csv file containing the fluorescence data.\")\n  fluorescence.filename <- choose.files(caption = \"Select the csv file containing the fluorescence data.\")\n  \n  print(\"Select the csv file containing standard errors for the fluorescence measurements.\")\n  fluorescence.se.filename <- choose.files(caption = \"Select the csv file containing standard errors for the fluorescence measurements.\")\n  \n  print(\"Select the csv file containing the change in total calcium concentration data.\")\n  delta.ca.total.filename <- choose.files(caption = \"Select the csv file containing the change in total calcium concentration data.\")\n  print(\"Select the csv file containing standard errors for the change in total calcium measurements.\")\n  delta.ca.total.se.filename <- choose.files(caption = \"Select the csv file containing standard errors for the change in total calcium measurements.\")  \n}\n\n#############################################################################################################################\n#############################################################################################################################\n\n# End Section 1\n\n#############################################################################################################################\n#############################################################################################################################\n\n\n#############################################################################################################################\n#############################################################################################################################\n\n# Begin Section 2: function library\n\n#############################################################################################################################\n#############################################################################################################################\n\nrequire(compiler); require(foreach); require(doParallel); require(minpack.lm); require(mosaic)\n\nString.Length <- function(str.1){\n  i <- 1\n  repeat{\n    if(substring(str.1,i,i+1)==\"\")\n      return(i-1)\n    i <- i +1\n  }\n}\n\nT.L.S.Distance <- function(x.error, beta, x, y, x.weight, y.weight, Fxn, return.vector=FALSE,x.max=NULL,x.min=NULL, return.matrix = FALSE, ...){\n  \n  if(is.null(dim(x))){\n    x <- matrix(x,nrow=1)\n    x.error <- matrix(x.error, nrow=1)\n    x.weight <- matrix(x.weight, nrow=1)\n    y.weight <- matrix(y.weight, nrow=1)\n  }\n  \n  \n  y.hat <- Fxn(x+x.error,beta, ...)\n  #   y.hat[!is.finite(y.hat)] <- .Machine$double.xmax^.25\n  if(any(!is.finite(y.hat)) | any((x + x.error > x.max)) | any((x + x.error < x.min))){\n    y.hat <- y.hat + .Machine$double.xmax^.25\n  }\n  y.error <- y.hat - y\n  out <- NULL  \n  x.out <- NULL  \n  \n  \n  \n  \n  if(is.null(ncol(x.weight))){\n    for(i in 1:length(x.weight)){\n      x.out <- cbind(x.out, x.error[,i]^2*x.weight[i]^2)\n    }\n  }else{\n    x.out <- (x.error^2*x.weight^2)\n  }\n  \n  y.out <- NULL  \n  if(is.null(ncol(y.weight))){\n    \n    for(i in 1:length(y.weight)){\n      y.out <- cbind(y.out, y.error[,i]^2*y.weight[i]^2)\n    }\n  }else{\n    y.out <- (y.error^2*y.weight^2)\n  }\n  \n  \n  \n  \n  out <- cbind(y.out,x.out)\n  out <- rowSums(out)\n  \n  if(!return.vector){\n    return(sum(out)^.5)\n  }\n  return(out^.5)\n}\nT.L.S.Distance.C <- cmpfun(T.L.S.Distance)\n\nT.L.S <- function(beta, ifixb, ifixx, y, x, x.weight, y.weight, beta.lower=-Inf, beta.upper=Inf, return.vector=FALSE, Fxn, x.error, beta2 = NULL,tls.env , x.max=NULL, x.min=NULL,...){\n  \n  if(!is.null(beta2)){\n    beta2[!ifixb] <- beta\n    beta <- beta2\n  }\n  values <- array(0, nrow(x))\n  ifixb <- as.logical(ifixb)\n  beta <- unlist(beta)\n  if(length(beta.lower)!=length(beta)){\n    beta.lower <- rep(-Inf,length(beta))\n  }\n  if(length(beta.upper)!=length(beta)){\n    beta.upper <- rep(Inf,length(beta))\n  }\n  if(!ifixx){\n    if(length(y.weight) < length(y)){\n      y.weight <- matrix(replicate(nrow(y),matrix(y.weight,nrow=1)),nrow=nrow(y))\n    }\n    if(length(x.weight) < length(x)){\n      x.weight <- matrix(replicate(nrow(x),matrix(x.weight,nrow=1)),nrow=nrow(x))\n    }\n    for(data.index in seq(nrow(x))){\n      x.err.start = .5 - x[data.index, ]\n      \n      fit <- optim(par=x.err.start, fn = T.L.S.Distance.C, beta = beta, x = x[data.index, ] , y = y[data.index, ],x.weight = x.weight[data.index,] ,y.weight = y.weight[data.index,] ,Fxn = Fxn, x.max = x.max, x.min = x.min, ...)\n      values[data.index] <-  fit$value\n      x.error[data.index,] <-  fit$par\n    }\n    \n    tls.env$x.error <- x.error\n  }else{ #ifixx\n    values <- T.L.S.Distance.C(x.error = x.error,beta = beta,x = x,y = y,x.weight = x.weight,y.weight = y.weight, Fxn = Fxn, return.vector = TRUE,x.max = x.max, x.min = x.min, ...)\n  } #ifixb\n  \n  \n  if (any(beta[!ifixb] < beta.lower[!ifixb])){\n    values <- values * (1 + sum(abs((beta.lower[!ifixb] - beta[!ifixb])[which(beta[!ifixb] < beta.lower[!ifixb])]) ) ) \n  }\n  if (any(beta[!ifixb] > beta.upper[!ifixb])){\n    values <- values * (1 + sum(abs((beta[!ifixb] - beta.upper[!ifixb])[which(beta[!ifixb] > beta.upper[!ifixb])]) ) )\n  }\n  \n  \n  if(return.vector==TRUE){\n    return(values)\n  }\n  return(sum(values^2))\n}\nT.L.S.C <- cmpfun(T.L.S)\n\nDelta.Ca.Total.Hat <- function(x,beta){\n  #   x[,1] == final fluorescence\n  #   x[,2] == final fluorescence\n  # beta[1]   == dynamic range\n  #beta[2]   == dye kd\n  #   beta[3] == dye concentration\n  #   beta[4] == endogenous buffer 1 kd\n  #   beta[5] == endogenous buffer 1 concentration\n  #   beta[6] == endogenous buffer 2 kd\n  #   beta[7] == endogenous buffer 2 concentration\n  #   beta[8] == nonsaturable endogenous buffer\n  #   beta[9] == accessible volume fraction\n  \n  calcium.final   <- ((x[,2] - (1/beta[1]))/(1 - x[,2])) * beta[2]\n  \n  calcium.initial <- ((x[,1] - (1/beta[1]))/(1 - x[,1])) * beta[2]\n  \n  delta.ca.total.hat  <- (1+beta[8])*(calcium.final - calcium.initial) - beta[4] * beta[5]/(beta[4] + calcium.final) + beta[4] * beta[5]/(beta[4] + calcium.initial) - beta[6] * beta[7]/(beta[6] + calcium.final) + beta[6] * beta[7]/(beta[6] + calcium.initial) - beta[2] * beta[3]/(beta[2] + calcium.final) + beta[2] * beta[3]/(beta[2] + calcium.initial)\n  \n  delta.ca.total.hat <- cbind(delta.ca.total.hat * beta[9])\n}\nDelta.Ca.Total.Hat.C <- cmpfun(Delta.Ca.Total.Hat)\n\nT.L.S.Gradient <- function(beta, x, y, x.error, x.weight, y.weight, beta2=NULL, beta.lower=-Inf, beta.upper=Inf, return.vector=TRUE, Distance.Function = T.L.S.Distance.C, Fxn, return.matrix=FALSE, F.Grad = NULL, ifixx = TRUE, ifixb, x.max = NULL, x.min = NULL, tls.env, grad.tol = .Machine$double.eps^.5, ...)\n{\n  gradient <- double(length(beta))\n  \n  if(!is.null(F.Grad)){\n    gradient <-  colSums(2*(y - Fxn(x = x + x.error , beta = beta, ...)) * F.Grad(x = x + x.error, beta = beta, ifixb, ...))\n    gradient[ifixb] <- 0\n  }else{\n    \n    gradient <- NULL\n    # no user supplied gradient\n    for(par.index in 1:length(beta)){\n      if(ifixb[par.index]){\n        gradient <- c(gradient,0)\n        next\n      }\n      delta <- double(length(beta))\n      delta[[par.index]] <- abs(beta[[par.index]] * .Machine$double.eps^.5) + .Machine$double.eps^.5\n      delta <- unlist(delta)\n      \n      grad0 <-  (T.L.S.C(beta = beta + delta, x = x, y = y, x.weight = x.weight, y.weight = y.weight, beta.lower = beta.lower, beta.upper = beta.upper, return.vector = FALSE,Fxn = Fxn, x.error = x.error, x.max = x.max, x.min = x.min, ifixx = ifixx, ifixb = as.logical(ifixb), tls.env = tls.env) - T.L.S.C(beta = beta - delta, x = x, y = y, x.weight = x.weight, y.weight = y.weight, beta.lower = beta.lower, beta.upper = beta.upper, return.vector = FALSE,Fxn = Fxn, x.error = x.error, x.max = x.max, x.min = x.min, ifixx = ifixx, ifixb = as.logical(ifixb), tls.env = tls.env) )/(2*delta[[par.index]])\n      \n      gradient <- c(gradient, grad0)\n      \n    }    \n    \n  }\n  \n  return(gradient)\n}\nT.L.S.Gradient.C <- cmpfun(T.L.S.Gradient)\n\nS.G.D <- function(beta, x, y, x.error=NULL, x.weight, y.weight, x.min = NULL, x.max = NULL, beta.lower, beta.upper, ifixb, Objective.Fxn = T.L.S.C, solution.tolerance=.Machine$double.eps^.5, max.iter = 5000, num.steps = 500, Grad = T.L.S.Gradient.C, decay.constant=.9995, data.env = new.env(), Fxn, parameter.boundary.margin = .01, p.restart = 1, p.restart.decay = .5,   p.restart.grow = 1.1, p.check.obj = .05, p.goto.best.par = .005, p.check.boundary = .01, ...){\n  #   Function: S.G.D (Stochastic Gradient Descent)\n  # S.G.D is a implementation of a stochastic gradient descent algorithm, in principle it can be used to minimize arbitrary user specefied functions but it was designed with the total least squares problem in mind\n  # Fxn: a user specefied function, here by default the function is a model of calcium buffering. the calling sequence for Fxn is Fxn(x, beta)\n  \n  # x: matrix of independent variables\n  #   y: matrix of dependent variables\n  # x.error: matrix of delta(x) values\n  #   x.weight: matrix of \"weights\" for x errors. The correct weight is the inverse of the standard error.\n  #   y.weight: matrix of \"weights\" for y errors. The correct weight is the inverse of the standard error.\n  #   x.min: lower limit for x values. may be a vector or scalar. during the minimization procedure we will require that x + x.error > x.min\n  #  x.max: analagous to x.min\n  # beta.lower: lower limit for parameters\n  # beta.upper: upper limit for parameters\n  # ifixb: logical vector with ifixb[i] == TRUE indicating the the ith component of beta is fixed\n  # Objective.Fxn: the function to be minized, by default a model of calcium buffering\n  # solution.tolerance: used to check convergence and whether two numbers are \"equal\"\n  # max.iter: maximum number of iterations to perform\n  # num.steps: sets the initial learning rate eta = (beta.upper - beta.lower)/num.steps. Here eta is the learning rate. That is, the update rule for each iteration is beta = beta + eta * grad(Objective.Fxn)\n  # Grad: function for computing the gradient of Objective.Fxn\n  # decay.constant: controls the rate at which the learning rate eta \"decays\" for each iteration we have eta = eta * decay.constant\n  # data.env: an R environment that is used to store some working data\n  # Fxn: a user supplied function to be fit\n  # parameter.boundary.margin: controls how close to the boundary the solution is allowed to be before restarting. If at any point we have abs(beta - beta.upper) < abs(beta.upper - beta.lower) * parameter.boundary.margin or abs(beta - beta.upper ) < abs(beta.upper - beta.lower) * parameter.boundary.margin, the beta is reset either randomly or the the best parameters so far\n  # p.restart: if the parameters are \"too close to the boundary\" as defined above, then the reset behavior described above is executed with probability p.restart\n  #p.restart.decay: if the parameters are reset, then p.restart = p.restart * p.restart.decay, this option is included to prevent the algorithm from restarting at every iteration, which may happen if the parameter limits are poorly chosen or on certain data sets\n  # p.restart.grow: if the parameters are on the boundary and a restart action is not performed, then p.restart = p.restart * p.restart.grow\n  # p.check.obj: evaluating the toal least squares objective function is very computationaly intensive, therefore we perform the evaluation with probability p.check.obj\n  # p.goto.best.par: with probably p.goto.best.par set beta to the best parameters observed so far\n  \n  #   if x.error wasn't initialized, initialize at 0\n  if(is.null(x.error)){\n    x.error <- x*0\n  }\n  #   cast ifixb as logical in case it was passed as an integer\n  ifixb <- as.logical(ifixb)\n  # get some useful measurements\n  n.row <- nrow(x); n.col.x <- ncol(x); n.col.y <- ncol(y)\n  #   call the tls objective function. when the objective function is called, the values for x.error that maximize the probability with beta fixed are stored in data.env$x.error. We will read those values and use them as the starting point for x.error for the minimizations.\n  Objective.Fxn(beta = beta,ifixb = ifixb,ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, Fxn = Fxn, x.error = x.error, tls.env = data.env, x.min = x.min, x.max = x.max  )\n  x.error <- data.env$x.error\n  \n  # minimize total squared error with levenberg-marquadt algorithm\n  nls.fit <- nls.lm(par = beta[!ifixb],lower = beta.lower[!ifixb] ,upper = beta.upper[!ifixb] ,fn = Objective.Fxn, ifixb = ifixb, ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, beta.lower = beta.lower, beta.upper = beta.upper, return.vector = TRUE, Fxn = Fxn, x.error = x.error, beta2 = beta, tls.env = data.env, x.max = x.max, x.min = x.min )\n  # parameters from lm fit are guaranteed to be the best so far, so store beta in best.par and the value in best.val\n  beta[!ifixb] <- nls.fit$par\n  best.par <- beta\n  best.int.par <- beta\n  best.val <- Objective.Fxn(beta = beta,ifixb = ifixb,ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, Fxn = Fxn, x.error = x.error, tls.env = data.env, x.min = x.min, x.max = x.max  )\n  x.error <- data.env$x.error\n  print(best.val)\n  print(best.par)\n  \n  j <- 1\n  k<-1\n  # initiate the learning rate based on user defined parameters\n  eta <- (beta.upper - beta.lower)/num.steps\n  if(any(!is.finite(eta))){\n    eta <- rep(x = 1/num.steps, times = sum(!ifixb))\n  }\n  reshuffle.counter <- 0\n  # shuffling a sequence of integers is a computationally efficient method for doing a balanced bootstrap\n  shuffle.seq <- resample(seq(n.row))\n  \n  while(j <= max.iter){\n    #     decrease learning rate at each iteration\n    eta <- eta * decay.constant\n    \n    #     increment counter for reshuffling, and reshuffle if needed \n    reshuffle.counter <- reshuffle.counter + 1\n    if(reshuffle.counter > nrow(x)-1){\n      print(j)\n      shuffle.seq <- resample(seq(nrow(x)))\n      reshuffle.counter <- 1 \n    }\n    \n    # check the objective function with probability p.check.obj\n    if(runif(1) < p.check.obj){\n      #       calculate objective at current parameters\n      current.val <- Objective.Fxn(beta = beta,ifixb = ifixb,ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, Fxn = Fxn, x.error = x.error, tls.env = data.env, x.min = x.min, x.max = x.max  )\n      # retrieve x.errors that maximize probability density with beta fixed at current value\n      x.error <- data.env$x.error\n      # if this beta is better than the best parameters found so far, then update best.par\n      if(current.val < best.val){\n        nls.fit <- nls.lm(par = beta[!ifixb],lower = beta.lower[!ifixb] ,upper = beta.upper[!ifixb] ,fn = Objective.Fxn, ifixb = ifixb, ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, beta.lower = beta.lower, beta.upper = beta.upper, return.vector = TRUE, Fxn = Fxn, x.error = x.error, beta2 = beta, tls.env = data.env, x.max = x.max, x.min = x.min )\n        beta[!ifixb] <- nls.fit$par\n        best.par <- beta\n        best.val <- Objective.Fxn(beta = beta,ifixb = ifixb,ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, Fxn = Fxn, x.error = x.error, tls.env = data.env, x.min = x.min, x.max = x.max  )\n        x.error <- data.env$x.error\n        print(best.val)\n        print(best.par)\n      }\n    }\n    \n    # check if parameters are on the boundary with probability p.check.boundary \n    if(runif(1) < p.check.boundary){\n      #       check for parameters within the margin of the boundary\n      parameter.on.boundary <- any(beta[!ifixb] < beta.lower[!ifixb] + (beta.upper[!ifixb] - beta.lower[!ifixb]) * parameter.boundary.margin) | any(beta[!ifixb] > beta.upper[!ifixb] - (beta.upper[!ifixb] - beta.lower[!ifixb]) * parameter.boundary.margin)\n      if(parameter.on.boundary){\n        #         if parameters are on the boundary, increase the current value of p.restart by a factor of p.restart.grow\n        p.restart <- p.restart * p.restart.grow\n        # with probability p.restart, move the current estimate off of the boundary        \n        if(runif(1) < p.restart){\n          #           if we restart, then decrease the probability that we will restart again\n          p.restart <- p.restart * p.restart.decay\n          #if parameters on boundary, then randomly reset parameters. The method for resetting parameters is randomly chosen between:\n          #1: randomly reset parameters\n          #2: set beta to previous best point on interior of parameter space\n          if(resample(c(TRUE,FALSE), 1)){\n            beta[!ifixb] <-  beta.lower[!ifixb] + (beta.upper[!ifixb] - beta.lower[!ifixb]) * runif(sum(!ifixb), min = parameter.boundary.margin, max = (1-parameter.boundary.margin))\n          }else{\n            beta <- best.int.par \n          }\n          #           if the parameters were reset, then use lm for local minimization\n          x.error <- matrix(0, nrow = n.row, ncol = n.col.x)\n          Objective.Fxn(beta = beta,ifixb = ifixb,ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, Fxn = Fxn, x.error = x.error, tls.env = data.env, x.min = x.min, x.max = x.max  )\n          x.error <- data.env$x.error\n          nls.fit <- nls.lm(par = beta[!ifixb],lower = beta.lower[!ifixb] ,upper = beta.upper[!ifixb] ,fn = Objective.Fxn, ifixb = ifixb, ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, beta.lower = beta.lower, beta.upper = beta.upper, return.vector = TRUE, Fxn = Fxn, x.error = x.error, beta2 = beta, tls.env = data.env, x.max = x.max, x.min = x.min )\n          beta[!ifixb] <- nls.fit$par\n        }\n        \n      } \n    }\n    # set beta to the best parameters with probability p.goto.best.par\n    if(runif(1) < p.goto.best.par){\n      beta <- best.par\n      current.val <- Objective.Fxn(beta = beta,ifixb = ifixb,ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, Fxn = Fxn, x.error = x.error, tls.env = data.env, x.min = x.min, x.max = x.max  )\n      x.error <- data.env$x.error\n    }\n    # calculate gradient\n    delta <- Grad(beta = beta,x = matrix(x[shuffle.seq[reshuffle.counter],] ,ncol = ncol(x)), y = matrix(y[shuffle.seq[reshuffle.counter],], ncol = ncol(y)), x.error = matrix(x.error[shuffle.seq[reshuffle.counter],], ncol = ncol(x)), x.weight = matrix(x.weight[shuffle.seq[reshuffle.counter],], ncol = ncol(x)), y.weight = matrix(y.weight[shuffle.seq[reshuffle.counter],], ncol = ncol(y)), beta.lower = beta.lower, beta.upper = beta.upper, Fxn = Fxn, ifixx = TRUE, ifixb = ifixb,tls.env = data.env, x.min = x.min, x.max = x.max )\n    \n    \n    # if the update would take beta outside of the parameter bounds, then decrease the current step size    \n    while(any(((beta - eta*delta) < beta.lower) | ((beta - eta*delta) > beta.upper))){\n      delta <- delta/10\n    }\n    \n    # update beta\n    beta <- beta - eta * delta\n    \n    # if beta is outside the parameter space, place it on the edge\n    #     beta[beta < beta.lower] <- beta.lower[beta < beta.lower]\n    #     beta[beta > beta.upper] <- beta.upper[beta > beta.upper]\n    \n    \n    j <- j + 1\n  }\n  return(list(value = best.val, par = best.par, fvec = Objective.Fxn(beta = beta,ifixb = ifixb,ifixx = FALSE, y = y, x = x, x.weight = x.weight, y.weight = y.weight, Fxn = Fxn, x.error = x.error, tls.env = data.env, x.min = x.min, x.max = x.max, return.vector = TRUE )))    \n}\nS.G.D.C <- cmpfun(S.G.D)\n\n\n\n#############################################################################################################################\n#############################################################################################################################\n\n# End Section 2\n\n#############################################################################################################################\n#############################################################################################################################\n\n\n\n#############################################################################################################################\n#############################################################################################################################\n\n# Begin Section 3: executable code\n\n#############################################################################################################################\n#############################################################################################################################\n\nif(!interactive.file.chooser){\n  if(substring(data.directory,String.Length(data.directory)) == \"/\"){\n    data.directory <-  substring(data.directory,1, String.Length(data.directory)-1)\n  }  \n  fluorescence.filename <- file.path(data.directory,fluorescence.filename)\n  fluorescence.se.filename <- file.path(data.directory, fluorescence.se.filename)\n  delta.ca.total.filename <- file.path(data.directory, delta.ca.total.filename)\n  delta.ca.total.se.filename <- file.path(data.directory, delta.ca.total.se.filename)\n}\n\n\nx <- as.matrix(read.csv(fluorescence.filename))\nx.weight <- as.matrix(read.csv(fluorescence.se.filename))\ny <- as.matrix(read.csv(delta.ca.total.filename))\ny.weight <- as.matrix(read.csv(delta.ca.total.se.filename))\n\nif( length(unique(c(nrow(x),nrow(y),nrow(x.weight),nrow(y.weight)))) > 1){\n  stop(\"fluorescence, change in total calcium, and their respective measurement errors must have the same number of rows\")\n}\n\n\nx.weight <- 1/x.weight\ny.weight <- 1/y.weight\ntls.data.env <- new.env()\n\nx.min <- c(F.MIN, F.MIN)\nx.max <- c(F.MAX, F.MAX)\nifixb <- parameter.is.fixed\n\n\nif(!do.bootstrap.estimate){\n  sgd.result <- S.G.D.C(beta = beta, x = x, y = y, x.weight = x.weight, y.weight = y.weight, x.min = x.min, x.max = x.max, beta.lower = beta.lower, beta.upper = beta.upper, ifixb = ifixb, max.iter = max.iterations, data.env = tls.data.env, Fxn = Delta.Ca.Total.Hat.C, parameter.boundary.margin = parameter.boundary.margin, p.restart = p.restart, p.restart.decay = p.restart.decay,   p.restart.grow = p.restart.grow, p.check.obj = p.check.obj, p.goto.best.par = p.goto.best.par)\n  write(paste(\"Sum of total squared errors at final parameter estimates:\",sgd.result$value,sep=\" \"), file = \"results.txt\")\n  write(\"\",file = \"results.txt\", append = TRUE)\n  write(\"Paramter estimates:\",file = \"results.txt\", append = TRUE)\n  write(\"\",file = \"results.txt\", append = TRUE)\n#   write(parameter.names, file = \"results.txt\", append = TRUE)\n  write(paste(parameter.names, sgd.result$par, sep = \": \"), file = \"results.txt\", append = TRUE)\n  write(\"\",file = \"results.txt\", append = TRUE)\n  write(\"Standard errors were not estimated.\",file = \"results.txt\", append = TRUE)\n\nprint(paste(\"Sum of total squared errors at final parameter estimates:\",sgd.result$value,sep=\" \"))\nprint(\"Paramter estimates:\")\nprint(paste(parameter.names, sgd.result$par, sep = \": \"))\nprint(\"Standard errors were not estimated.\")\nprint(paste(\"A copy of these results can be found in\", file.path(getwd(), \"results.txt\") ))\n}else{\n  boot.estimates <- NULL\n  \n  cl <- makeCluster(n.threads)\n  registerDoParallel(cl)\n  \n  boot.estimates <- NULL\n  boot.estimates <- foreach(i = seq(bootstrap.replicates), .packages=c(\"minpack.lm\",\"mosaic\"), .combine = rbind ) %dopar% {\n    boot.samples <- ((seq(nrow(x)) + resample(size = nrow(x),seq(-floor(nrow(x)/10), floor(nrow(x)/10)))) %% nrow(x)) + 1\n    tls.data.env <- new.env()\n    tls.data.env$x.error <- matrix(0,nrow = nrow(x), ncol = ncol(x))\n    sgd.result <- S.G.D.C(beta = beta, x = x[boot.samples,], y = matrix(y[boot.samples,], nrow = nrow(y), ncol = ncol(y)), x.weight = x.weight[boot.samples,], y.weight = matrix(y.weight[boot.samples,], nrow = nrow(y), ncol = ncol(y)), x.min = x.min, x.max = x.max, beta.lower = beta.lower, beta.upper = beta.upper, ifixb = ifixb, max.iter = max.iterations, data.env = tls.data.env, Fxn = Delta.Ca.Total.Hat.C, parameter.boundary.margin = parameter.boundary.margin, p.restart = p.restart, p.restart.decay = p.restart.decay,   p.restart.grow = p.restart.grow, p.check.obj = p.check.obj, p.goto.best.par = p.goto.best.par)\n    \n    if(replace.on.boundary){\n      while(sum((abs(sgd.result$par[!ifixb] - beta.lower[!ifixb]) < boundary.margin[!ifixb]) + (abs(sgd.result$par[!ifixb] - beta.upper[!ifixb]) < boundary.margin[!ifixb])) > 0){\n        boot.samples <- ((seq(nrow(x)) + resample(size = nrow(x),seq(-floor(nrow(x)/10), floor(nrow(x)/10)))) %% nrow(x)) + 1\n        tls.data.env <- new.env()\n        tls.data.env$x.error <- matrix(0,nrow = nrow(x), ncol = ncol(x))\n        sgd.result <- S.G.D.C(beta = beta, x = x[boot.samples,], y = matrix(y[boot.samples,], nrow = nrow(y), ncol = ncol(y)), x.weight = x.weight[boot.samples,], y.weight = matrix(y.weight[boot.samples,], nrow = nrow(y), ncol = ncol(y)), x.min = x.min, x.max = x.max, beta.lower = beta.lower, beta.upper = beta.upper, ifixb = ifixb, max.iter = max.iterations, data.env = tls.data.env, Fxn = Delta.Ca.Total.Hat.C)\n      }\n      \n      \n    }\n    if(sgd.result$par[4] > sgd.result$par[6]){\n      beta.4 <- sgd.result$par[4]\n      sgd.result$par[4] <- sgd.result$par[6]\n      sgd.result$par[6] <- beta.4\n      \n      beta.5 <- sgd.result$par[5]\n      sgd.result$par[5] <- sgd.result$par[7]\n      sgd.result$par[7] <- beta.5\n    }\n    c(sgd.result$par,TSE=sgd.result$value)\n  }\n  \n  stopImplicitCluster()\n  stopCluster(cl)\n  \n  write.csv(boot.estimates, \"results.txt\", row.names = FALSE)\n  print(paste(\"Finished. Results are contained in\", file.path(getwd(), \"results.txt\") ))\n}\n\n\n",
    "created" : 1411270329209.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "642007340",
    "id" : "6BC68135",
    "lastKnownWriteTime" : 1411416790,
    "path" : "F:/2013/kd estimation/CalciumBufferingTLS/Ca.Buffering.TLS.Sub.R",
    "project_path" : "Ca.Buffering.TLS.Sub.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}