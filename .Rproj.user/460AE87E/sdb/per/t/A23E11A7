{
    "contents" : "# This script executes a total least squares fit of a calcium buffering model using a stochastic gradient descent algorithm. It is divided into three sections. The first section contains user defined parameters, and must be specified by the user. The second section defines functions used for the fitting process, and should not be modified. The third section executes the fitting procedure, and should only be modified with caution. After modifying section 1, run this source file. A series of prompts will ask you to choose the files containing the fluorescence measurements, and standard errors for each measurement, and estimates for the change in total calcium concentration, and their standard errors.\n\n#############################################################################################################################\n#############################################################################################################################\n\n# Begin Section 1: user defined parameters\n\n#############################################################################################################################\n#############################################################################################################################\n\n# The fitting algorithm estimates values for the unknown fluorescence measurement errors at each point by maximizing the likelihood function evaluated at f.initial.i + f.initial.error.i and f.final.i + f.final.error.i for each i of n total measurements. We must place some restrictions on the algorithm so that the resulting test points are physically reasonable. That is, the normalized fluorescence must be positive and must be less than one. Here we specifiy the values F.MIN and F.MAX that limit the permited values of the error estimates so that F.MIN < f.initial.i + f.initial.error < F.MAX, with the corresponding condition holding for the fluorescence measurements after the stimulation.  F.MIN should be chosen to be greater than 1/rf, where rf is the dynamic range. By examining the equation for converting normalized fluorescence to free calcium i.e. ca = kd*(f - 1/rf)/(1-f), one can see that for f < 1/rf the calculated calcium concentrations are negative. Similarly for normalized fluorescence exactly equal to one, the implied calcium concentration is infinite, and negative for values greater than one. \nF.MIN <- .01\nF.MAX <- .995\n\n# max.iterations specifies the maximum number of stochastic gradient descent iterations to perform. In the current verstion, reaching max.iterations is the only method for terminating the fit, and exactly max.iterations will always be performed.\nmax.iterations <- 10000\n\n# The full model contains nine total parameters:\n# the dynamic range, rf\n# the kd of the indicator dye, kd.dye\n# the total concentration of the indicator dye, bt.dye\n# the kd of endogenous buffers to be modeled, kd.1 and kd.2\n# the total concentration of the corresponding buffers, bt.1 and bt.2\n# a nonsaturable calcium buffer or a buffer with sufficiently low affinity that its buffering capacity does not change appreciably over the range of free calcium values investigated, kappa.nonsaturable\n# the fraction of the intracellular volume that is accessible to calcium, accesible.volume\n# all of the parameters are specified in a single vector, beta\n# the user must specify starting parameters and upper and lower limits\n# for a particular run, the user must specify whicy parameters are to be considered as fixed at there starting values, and which parameters the algorithm should modify to perform the fit. \n\n# parameter.is.fixed is a logical vector specifying which parameters are to be considered fixed. The convention is that values set to \"TRUE\" are treated as fixed parameters. Note that R is case sensitive, the logical values TRUE and FALSE must be in all capital letters. \nparameter.is.fixed <- c(rf = TRUE, kd.dye = FALSE, bt.dye = TRUE, kd.1 = FALSE, bt.1 = FALSE, kd.2 = TRUE, bt.2 = TRUE, kappa.nonsaturable = TRUE, accessible.volume = FALSE)\n\n# The user must specify starting values for the parameters. The stochastic gradient descent algorithm is designed to escape local \"false\" optima in the parameter space that can be attributed to measurement noise. Therefore, it is not especially sensitive to starting estimates provided that a unique optimum exists. Extremely poor choices for starting parameters, however, may cause the algorithm to behave poorly. For parameters that are fixed, their values are fixed at the initial estimate provided in beta.\nbeta <- c(rf = 50, kd.dye = .400, bt.dye = 100, kd.1 = 2, bt.1 = 100, kd.2 = 0, bt.2 = 0, kappa.nonsaturable = 0, accessible.volume = .5  )\n\n\n#The algorithm requires lower and upper bounds on parameters. Poor performance can be guaranteed by improper specification of the upper and lower bounds on beta. Some simple physical considerations provide guidelines for choosing good boundaries. Clearly the kd for the dye and any endogenous buffers must be positive. If the kd of the endogenous buffer were too large then it would not even partially saturate over the range of observable free calcium values. Therefore, the upper bounds on the endogenous buffer kd's may be taken to be some multiple of the dye kd. Extremely low affinity buffers can be modeled as nonsaturable buffers. The nonsaturable buffering capacity, if present, must be strictly nonnegative and an upper limit must be estimated by considerations of the preparation. Strictly speaking, the fraction of accessible volume must be less than or equal to one, however, some allowance should be made for under estimation of the total volume.  The lower boundary for the fraction of accessible volume must be strictly greater than zero, and a suitable value may be estimated from knowledge of the preparation.\nbeta.lower <- c(rf = 20, kd.dye = .1, bt.dye = 50, kd.1 = 0, bt.1 = 0, kd.2 = 0, bt.2 = 0, kappa.nonsaturable = 0, accessible.volume = .05)\n\nbeta.upper <- c(rf = 200, kd.dye = 2, bt.dye = 200, kd.1 = 10, bt.1 = 1000, kd.2 = 10, bt.2 = 1000, kappa.nonsaturable = 200, accessible.volume = 1.1)\n\n\n# parameter.names specifies the names of the parameters, this is used only to write output files\nparameter.names <- c(\"rf\", \"kd.dye\", \"bt.dye\", \"kd.endogenous.1\", \"bt.endogenous.1\", \"kd.endogenous.2\", \"bt.endogenous.2\", \"kappa.nonsaturable\", \"accessible.volume\")\n\n# The stochastic gradient descent algorithm does not intrinsicly generate reliable estimates for the standard errors of the parameters. By default no estimates of the standard error are provided. Estimates may be provided by setting do.bootstrap.estimate = TRUE. Note again that R is case sensitive, the logical values TRUE and FALSE must be all capital letters. If error estimates are desired, then the number of bootstrap replicates is specified by the value of bootstrap.replicates. A significant shortcoming of the total least squares estimation procedure is the computational time required, users are cautioned that calculating parameter estimates will require significant computational time. The fits to the bootstrapped data sets can be done concurrently on multicore processors. To use this facility, set n.threads to the desired number of threads. Due to the stochastic nature of the algorithm, it will occasionally get stuck at the boundaries of the parameter space, and may have difficulty moving back into the interior. The veracity of parameters under this case is suspect. By default, the program will discard estimates that are too close to the boundary. This behavior is controlled by the replace.on.boundary and boundary.margin variables. Boundary points are discarded if replace.on.boundary = TRUE, and retained otherwise. The criteria for discarding estimates is controlled by the bondary.margin variable. Estimates are discarded if the distance between the estimated parameter values and the parameter limits is less than boundary.margin.\ndo.bootstrap.estimate = FALSE\nbootstrap.replicates = 8\nn.threads = 4\nreplace.on.boundary = TRUE\nboundary.margin = (beta.upper - beta.lower) * (.Machine$double.eps)^.5\n\n#The data files may be specefied in one of two ways. If interactive.file.chooser = TRUE then, when this script is ran, the user will select the files interactively through a file chooser dialog box. If interactive.file.chooser = FALSE then the file names with full paths must be specefied below.\n\ninteractive.file.chooser = TRUE\n#file path to the directory containing the data:\ndata.directory = \"F://Documents\"\n#The fluorescence measurement data:\nfluorescence.filename = \"f.csv\"\n#Fluorescence measurement error estimates:  \nfluorescence.se.filename = \"f.sem.csv\"\n#Total calcium increment:\ndelta.ca.total.filename = \"ca.csv\"\n#Total calcium increment error estimates:\ndelta.ca.total.se.filename = \"ca.sem.csv\"\n\n\n#Done setting variables. Stop modifying here. When this script is executed, a sequence of file chooser dialog boxes will open. For each dialog box, the program will print to the R console a description of which file should be chosen. The program will request the location for the fluorescence data file, the fluorescence measurement standard errors, calcium increment, and calcium increment standard errors, in that order. After the data files are read, the fitting process will begin. A single run can be very time consuming, and calculating parameter standard errors from bootstraping will be proportionally longer by a factor of bootstrap.replicates/n.threads. \n#If do.bootstrap.estimates = FALSE, then the program will output status updates to the R console as described in the manual. If do.bootstrap.estimates = TRUE, then n.threads will be run in parallel. In this case, the parallel processing facility will supress output to the R console. Output is supressed even for n.threads=1.\n\n#When the fitting process has finished, the results will be written to an output file. The output is qualitatively different depending on the do.bootstrap.estimate flag. For do.bootstrap.estimate = FALSE, the results are written to results.txt in human readable format. If do.bootstrap.estimate = TRUE, the output file is results.csv, with bootsrap.replicates rows. Each row corresponds to the solution for a single bootstrap data set.\n\n#To run the script from inside RStudio: from the top menu, select code -> source.\nsource(\"Ca.Buffering.TLS.Sub.R\")",
    "created" : 1409786454833.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2661682417",
    "id" : "A23E11A7",
    "lastKnownWriteTime" : 1409785300,
    "path" : "C:/Users/shane/Desktop/CalciumBufferingTLS/Run.Ca.Buffering.TLS.R",
    "project_path" : "Run.Ca.Buffering.TLS.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}